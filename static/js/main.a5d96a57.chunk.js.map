{"version":3,"sources":["TempDrawer.js","Header.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","list","width","padding","spacing","fullList","TemporaryDrawer","classes","React","useState","top","left","bottom","right","state","setState","toggleDrawer","anchor","open","event","type","key","className","clsx","role","onClick","onKeyDown","Typography","paragraph","Link","href","target","map","Fragment","Button","color","Drawer","onClose","root","flexGrow","menuButton","marginRight","title","breakpoints","up","display","SearchAppBar","props","AppBar","Toolbar","IconButton","Home","variant","GitHub","axios","require","tf","columns","field","getShape","players","strats","shape","Array","fill","concat","console","log","getTensor","tensor","values","error","reduce","a","b","randomUniform","print","App","matrix","JSON","parse","data","arraySync","headers","post","resp","indexes","rows","loading","this","id","index","payoff","autoHeight","Accordion","AccordionSummary","expandIcon","ExpandMore","heading","AccordionDetails","component","toString","Grid","container","item","Paper","paper","TextField","label","required","value","onChange","Number","Tooltip","size","Accord","Dgrid","Component","withStyles","flexDirection","justifyContent","height","minWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5d96a57.chunk.js","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport { Typography, Link } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n    list: {\n        width: 250,\n        padding: theme.spacing(2),\n    },\n    fullList: {\n        width: 'auto',\n    },\n}));\n\nexport default function TemporaryDrawer() {\n    const classes = useStyles();\n    const [state, setState] = React.useState({\n        top: false,\n        left: false,\n        bottom: false,\n        right: false,\n    });\n\n    const toggleDrawer = (anchor, open) => (event) => {\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n            return;\n        }\n\n        setState({ ...state, [anchor]: open });\n    };\n\n    const list = (anchor) => (\n        <div\n            className={clsx(classes.list, {\n                [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n            })}\n            role=\"presentation\"\n            onClick={toggleDrawer(anchor, false)}\n            onKeyDown={toggleDrawer(anchor, false)}\n        >\n            <Typography paragraph>\n                I learned about payoff matrices in AP Econ, but we only did 2-player 2-strategy games. I wanted to be able to solve much bigger games. With more strategies, your matrix gets taller and wider. With more players, you get more dimensions, so your payoff matrix becomes a payoff tensor.\n            </Typography>\n                \n            <Typography paragraph>\n                The frontend uses TensorFlow.js to generate a random payoff matrix or parse the inputted matrix. It is passed to a Google Cloud Function that uses NumPy to solve the game. You can view the code\n                {' '}\n                <Link\n                    href='https://github.com/GeorgeFane/mdining/blob/main/function/main.py'\n                    target='_blank'\n                >\n                    here\n                </Link>\n            </Typography>\n        </div>\n    );\n\n    return (\n        <div>\n            {['right'].map((anchor) => (\n                <React.Fragment key={anchor}>\n                    <Button\n                        color='inherit'\n                        onClick={toggleDrawer(anchor, true)}\n                    >\n                        About\n                    </Button>\n                    <Drawer\n                        anchor={anchor}\n                        open={state[anchor]}\n                        onClose={toggleDrawer(anchor, false)}\n                    >\n                        {list(anchor)}\n                    </Drawer>\n                </React.Fragment>\n            ))}\n        </div>\n    );\n}\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { alpha, makeStyles } from '@material-ui/core/styles';\nimport { GitHub, Home, Search } from '@material-ui/icons';\n\nimport TempDrawer from './TempDrawer';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n}));\n\nexport default function SearchAppBar(props) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar>\n                <Toolbar>\n                    \n                    <IconButton\n                        color=\"inherit\"\n                        href='https://georgefane.github.io/'\n                    >\n                        <Home />\n                    </IconButton>\n\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Payoff Matrix Solver\n                    </Typography>\n\n                    <Typography variant=\"body1\" className={classes.title}>\n                        Solve economic games with any number of players and strategies\n                    </Typography>\n\n                    <TempDrawer />\n\n                    <IconButton\n                        color=\"inherit\"\n                        href='https://github.com/GeorgeFane/PayoffMatrixSolver'\n                        target='_blank'\n                    >\n                        <GitHub />\n                    </IconButton>\n\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","import React, { useState, Component } from 'react';\nimport { Grid, Paper, TextField, Typography, Button, Toolbar, Accordion, AccordionDetails, AccordionSummary, Tooltip } from '@material-ui/core';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { ExpandMore } from '@material-ui/icons';\n\nimport Header from './Header';\n\nconst axios = require('axios');\nconst tf = require('@tensorflow/tfjs');\n\nconst useStyles = theme => ({\n    root: {\n        flexGrow: 1,\n        padding: theme.spacing(1),\n    },\n    title: {\n        padding: theme.spacing(1),\n    },\n    paper: {\n        padding: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        height: '100%',\n    },\n    item: {\n        minWidth: 111,\n    }\n});\n\nconst width = 133;\nconst columns = [\n    { field: 'id' },\n    { field: 'index', width },\n    { field: 'payoff', width },\n];\n\nconst url = 'https://us-central1-georgefane.cloudfunctions.net/pmsolver';\n\nfunction getShape(players, strats) {\n    const shape = new Array(players).fill(strats).concat(players)\n    console.log(shape);\n    return shape;\n}\n\nfunction getTensor(shape, values = false) {\n    var tensor;\n    try {\n        tensor = tf.tensor(values, shape);\n    }\n    catch (error) {\n        console.log(error);\n        const top = shape.reduce( (a, b) => a * b);\n        tensor = tf.randomUniform(shape, 0, top, 'int32');\n    }\n\n    tensor.print();\n    return tensor;\n}\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            players: 2,\n            strats: 2,\n            rows: [],\n            loading: false,\n            matrix: '',\n            tensor: false,\n            indexes: [],\n        };\n    }\n\n    onClick = async () => {\n        const { players, strats, matrix } = this.state;\n\n        const shape = getShape(players, strats);\n        var values;\n        try {\n            values = JSON.parse(matrix);\n        }\n        catch {\n            values = null;\n        }\n\n        const tensor = getTensor(shape, values);\n        this.setState({ tensor });\n\n        const data = tensor.arraySync();\n        const headers = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n        const resp = await axios.post(url, { data, headers });\n        console.log(resp);\n        const indexes = resp.data.data;\n        console.log(indexes);\n        this.setState({ indexes });\n    }\n\n    Dgrid() {\n        const { classes } = this.props;\n        const { loading, indexes, tensor } = this.state;\n        if (!tensor) {\n            return <div />;\n        }\n\n        const rows = indexes.map( ([index, payoff], id) => (\n            { id, index, payoff }\n        ));\n\n        const data = {\n            rows, columns, loading,\n            autoHeight: true,\n        }\n        return <DataGrid {...data} />;\n    }\n\n    Accord() {\n        const { classes } = this.props;\n        const { loading, indexes, tensor } = this.state;\n        if (!tensor) {\n            return <div />;\n        }\n\n        return (\n            <Accordion>\n                <AccordionSummary\n                    expandIcon={<ExpandMore />}\n                >\n                    <Typography className={classes.heading}>\n                        Payoff Matrix\n                    </Typography>\n                </AccordionSummary>\n\n                <AccordionDetails>\n                    <Typography component='pre'>\n                        {tensor.toString(true)}\n                    </Typography>\n                </AccordionDetails>\n            </Accordion>\n        )\n    }\n\n    render() {\n        const { classes } = this.props;\n        const { players, strats, matrix, tensor } = this.state;\n\n        return (\n            <div>\n                <Header />\n                <Toolbar />\n\n                <div className={classes.root}>\n\n                    <Grid container\n                        spacing={1}\n                        className={classes.item}\n                    >\n                        \n                        <Grid item>\n                            <Paper className={classes.paper}>\n                                <Typography variant='h6'>\n                                    Input Payoff Matrix:\n                                </Typography>\n                            </Paper>\n                        </Grid>\n\n                        <Grid item>\n                            <Paper className={classes.paper}>\n                                <TextField \n                                    label=\"No. Players\" type='number' required\n                                    value={players}\n                                    onChange={(event) => {\n                                        var players = Number(event.target.value);\n                                        this.setState({ players });\n                                    }}\n                                />\n                            </Paper>\n                        </Grid>\n                        \n                        <Grid item>\n                            <Paper className={classes.paper}>\n                                <TextField \n                                    label=\"No. Strategies\" type='number' required\n                                    value={strats}\n                                    onChange={event => {\n                                        var strats = Number(event.target.value);\n                                        this.setState({ strats });\n                                    }}\n                                />\n                            </Paper>\n                        </Grid>\n\n                        <Grid item>\n                            <Paper className={classes.paper}>\n                                <Tooltip title={\n                                    <Typography variant='h6'>\n                                        If the 'Payoff Matrix' field is blank, a random payoff matrix is generated. You can input your matrix flat or nested.\n                                    </Typography>\n                                }>\n\n                                    <TextField \n                                        label=\"Payoff Matrix\"\n                                        value={matrix}\n                                        onChange={event => {\n                                            const matrix = event.target.value;\n                                            this.setState({ matrix });\n                                        }}\n                                    />\n                                </Tooltip>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                    <br /><br />\n\n                    <Grid container spacing={3}>\n                    <Grid item>\n        \n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            size=\"large\"\n                            onClick={this.onClick}\n                        >\n                            Submit\n                        </Button>\n\n                    </Grid>\n\n                    <Grid item>\n\n                        {this.Accord()}\n\n                    </Grid>\n\n                    <Grid item className={classes.root}>\n\n                        {this.Dgrid()}\n                        \n                    </Grid>\n\n                </Grid>\n                </div>\n            \n            </div>\n        );\n    }\n}\n\nexport default withStyles(useStyles)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}